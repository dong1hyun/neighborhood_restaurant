{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Documents\\\\GitHub\\\\neighborhood_restaurant\\\\client\\\\src\\\\components\\\\LoginBox.tsx\",\n  _s = $RefreshSig$();\n// import axios from 'axios';\n// import React, { useState, ChangeEvent, FormEvent } from 'react';\n// import { motion } from \"framer-motion\";\n// import styled from \"styled-components\";\n\n// interface FormData {\n//     id: string;\n//     password: string;\n// }\n\n// const LoginContainer = styled(motion.div)`\n//     position: absolute;\n//     z-index: 1;\n//     top: 200px;\n//     left: 0;\n//     right: 0;\n//     margin: 0 auto;\n//     width: 400px;\n//     height: 200px;\n//     background-color: rgba(255, 255, 255, 1);\n//     border-radius: 40px;\n//     box-shadow: 0 2px 3px rgba(0, 0, 0, 0.1), 0 10px 20px rgba(0, 0, 0, 0.06);\n//     text-align: center;\n// `;\n\n// // 모션 변형\n// const boxVariants = {\n//     initial: {\n//         opacity: 0,\n//         scale: 0\n//     },\n//     visible: {\n//         opacity: 1,\n//         scale: 1\n//     },\n//     leaving: {\n//         opacity: 0,\n//         scale: 0\n//     }\n// };\n\n// export default function LoginBox() {\n//     //formData는 현재의 입력 폼 데이터를 저장하는 변수이고, setFormData는 이 데이터를 업데이트하는 함수, useState초기값 + 타입\n//     const [formData, setFormData] = useState<FormData>({ id: '', password: '' });\n\n//     const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {\n//         // 폼이 제출 될 때마다, 새로고침되는 기본적인 이벤트를 취소하는 코드\n//         e.preventDefault();\n//         try {\n//             const response = await axios.post('/login', formData);\n//             console.log(response.data);\n//         } catch (error) {\n//             console.error('로그인 중 오류가 발생했습니다:', error);\n//         }\n//     };\n\n//     // (e: ChangeEvent<HTMLInputElement>) 여기서 input에 발생한 이벤트 값을 'e'객체에 넣어줌.\n//     const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n//         // ...formData는 기존의 객체 복사 및 업데이트하여 새로운 객체 생성. e.target.name -> input 'name' 속성. 그리고 해당 name의 입력 된 값 -> e.target.value\n//         setFormData({ ...formData, [e.target.name]: e.target.value });\n//     };\n\n//     // JSX를 반환합니다.\n//     // onSubmit은 폼이 제출될 때, 호출되는 함수를 지정\n//     // onChange는 입력값이 변경 될 때마다, 호출되는 함수 지정\n//     return (\n//         <LoginContainer\n//             variants={boxVariants}\n//             initial=\"initial\"\n//             animate=\"visible\"\n//             exit=\"leaving\"\n//         >   \n//             <form onSubmit={handleSubmit}>\n//                 <label>\n//                     아이디:\n//                     <input\n//                         type=\"text\"\n//                         name=\"id\"\n//                         value={formData.id}\n//                         onChange={handleChange}\n//                     />\n//                 </label>\n//                 <br />\n//                 <label>\n//                     비밀번호:\n//                     <input\n//                         type=\"password\"\n//                         name=\"password\"\n//                         value={formData.password}\n//                         onChange={handleChange}\n//                     />\n//                 </label>\n//                 <br />\n//                 <button type=\"submit\">로그인</button>\n//             </form>\n//         </LoginContainer>\n//     );\n// }\nimport axios from 'axios';\nimport React, { useState } from 'react';\nimport { motion } from \"framer-motion\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginContainer = styled(motion.div)`\n    position: absolute;\n    z-index: 1;\n    top: 200px;\n    left: 0;\n    right: 0;\n    margin: 0 auto;\n    width: 400px;\n    height: 200px;\n    background-color: rgba(255, 255, 255, 1);\n    border-radius: 40px;\n    box-shadow: 0 2px 3px rgba(0, 0, 0, 0.1), 0 10px 20px rgba(0, 0, 0, 0.06);\n    text-align: center;\n`;\n\n// 모션 변형\n_c = LoginContainer;\nconst boxVariants = {\n  initial: {\n    opacity: 0,\n    scale: 0\n  },\n  visible: {\n    opacity: 1,\n    scale: 1\n  },\n  leaving: {\n    opacity: 0,\n    scale: 0\n  }\n};\nexport default function LoginBox() {\n  _s();\n  //formData는 현재의 입력 폼 데이터를 저장하는 변수이고, setFormData는 이 데이터를 업데이트하는 함수, useState초기값 + 타입\n  const [formData, setFormData] = useState({\n    id: '',\n    password: ''\n  });\n  const [loggedInUser, setLoggedInUser] = useState(null); // State to hold the logged-in user's name\n\n  const handleSubmit = async e => {\n    // 폼이 제출 될 때마다, 새로고침되는 기본적인 이벤트를 취소하는 코드\n    e.preventDefault();\n    try {\n      const response = await axios.post('/login', formData);\n      console.log(response.data);\n      setLoggedInUser(response.data.name); // Set the logged-in user's name from the response\n    } catch (error) {\n      console.error('로그인 중 오류가 발생했습니다:', error);\n    }\n  };\n\n  // (e: ChangeEvent<HTMLInputElement>) 여기서 input에 발생한 이벤트 값을 'e'객체에 넣어줌.\n  const handleChange = e => {\n    // ...formData는 기존의 객체 복사 및 업데이트하여 새로운 객체 생성. e.target.name -> input 'name' 속성. 그리고 해당 name의 입력 된 값 -> e.target.value\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  // JSX를 반환합니다.\n  // onSubmit은 폼이 제출될 때, 호출되는 함수를 지정\n  // onChange는 입력값이 변경 될 때마다, 호출되는 함수 지정\n  return /*#__PURE__*/_jsxDEV(LoginContainer, {\n    variants: boxVariants,\n    initial: \"initial\",\n    animate: \"visible\",\n    exit: \"leaving\",\n    children: loggedInUser ?\n    /*#__PURE__*/\n    // If a user is logged in, display the welcome message\n    _jsxDEV(\"div\", {\n      children: [\"\\uD658\\uC601\\uD569\\uB2C8\\uB2E4, \", loggedInUser, \"\\uB2D8!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 17\n    }, this) :\n    /*#__PURE__*/\n    // If no user is logged in, display the login form\n    _jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"\\uC544\\uC774\\uB514:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"id\",\n          value: formData.id,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"\\uBE44\\uBC00\\uBC88\\uD638:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          name: \"password\",\n          value: formData.password,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"\\uB85C\\uADF8\\uC778\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 9\n  }, this);\n}\n_s(LoginBox, \"b7Up+V2TvewvkExrGQA1KR8/MH0=\");\n_c2 = LoginBox;\nvar _c, _c2;\n$RefreshReg$(_c, \"LoginContainer\");\n$RefreshReg$(_c2, \"LoginBox\");","map":{"version":3,"names":["axios","React","useState","motion","styled","jsxDEV","_jsxDEV","LoginContainer","div","_c","boxVariants","initial","opacity","scale","visible","leaving","LoginBox","_s","formData","setFormData","id","password","loggedInUser","setLoggedInUser","handleSubmit","e","preventDefault","response","post","console","log","data","name","error","handleChange","target","value","variants","animate","exit","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","_c2","$RefreshReg$"],"sources":["C:/Users/user/Documents/GitHub/neighborhood_restaurant/client/src/components/LoginBox.tsx"],"sourcesContent":["// import axios from 'axios';\r\n// import React, { useState, ChangeEvent, FormEvent } from 'react';\r\n// import { motion } from \"framer-motion\";\r\n// import styled from \"styled-components\";\r\n\r\n// interface FormData {\r\n//     id: string;\r\n//     password: string;\r\n// }\r\n\r\n// const LoginContainer = styled(motion.div)`\r\n//     position: absolute;\r\n//     z-index: 1;\r\n//     top: 200px;\r\n//     left: 0;\r\n//     right: 0;\r\n//     margin: 0 auto;\r\n//     width: 400px;\r\n//     height: 200px;\r\n//     background-color: rgba(255, 255, 255, 1);\r\n//     border-radius: 40px;\r\n//     box-shadow: 0 2px 3px rgba(0, 0, 0, 0.1), 0 10px 20px rgba(0, 0, 0, 0.06);\r\n//     text-align: center;\r\n// `;\r\n\r\n// // 모션 변형\r\n// const boxVariants = {\r\n//     initial: {\r\n//         opacity: 0,\r\n//         scale: 0\r\n//     },\r\n//     visible: {\r\n//         opacity: 1,\r\n//         scale: 1\r\n//     },\r\n//     leaving: {\r\n//         opacity: 0,\r\n//         scale: 0\r\n//     }\r\n// };\r\n\r\n\r\n// export default function LoginBox() {\r\n//     //formData는 현재의 입력 폼 데이터를 저장하는 변수이고, setFormData는 이 데이터를 업데이트하는 함수, useState초기값 + 타입\r\n//     const [formData, setFormData] = useState<FormData>({ id: '', password: '' });\r\n\r\n    \r\n//     const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n//         // 폼이 제출 될 때마다, 새로고침되는 기본적인 이벤트를 취소하는 코드\r\n//         e.preventDefault();\r\n//         try {\r\n//             const response = await axios.post('/login', formData);\r\n//             console.log(response.data);\r\n//         } catch (error) {\r\n//             console.error('로그인 중 오류가 발생했습니다:', error);\r\n//         }\r\n//     };\r\n\r\n//     // (e: ChangeEvent<HTMLInputElement>) 여기서 input에 발생한 이벤트 값을 'e'객체에 넣어줌.\r\n//     const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n//         // ...formData는 기존의 객체 복사 및 업데이트하여 새로운 객체 생성. e.target.name -> input 'name' 속성. 그리고 해당 name의 입력 된 값 -> e.target.value\r\n//         setFormData({ ...formData, [e.target.name]: e.target.value });\r\n//     };\r\n\r\n//     // JSX를 반환합니다.\r\n//     // onSubmit은 폼이 제출될 때, 호출되는 함수를 지정\r\n//     // onChange는 입력값이 변경 될 때마다, 호출되는 함수 지정\r\n//     return (\r\n//         <LoginContainer\r\n//             variants={boxVariants}\r\n//             initial=\"initial\"\r\n//             animate=\"visible\"\r\n//             exit=\"leaving\"\r\n//         >   \r\n//             <form onSubmit={handleSubmit}>\r\n//                 <label>\r\n//                     아이디:\r\n//                     <input\r\n//                         type=\"text\"\r\n//                         name=\"id\"\r\n//                         value={formData.id}\r\n//                         onChange={handleChange}\r\n//                     />\r\n//                 </label>\r\n//                 <br />\r\n//                 <label>\r\n//                     비밀번호:\r\n//                     <input\r\n//                         type=\"password\"\r\n//                         name=\"password\"\r\n//                         value={formData.password}\r\n//                         onChange={handleChange}\r\n//                     />\r\n//                 </label>\r\n//                 <br />\r\n//                 <button type=\"submit\">로그인</button>\r\n//             </form>\r\n//         </LoginContainer>\r\n//     );\r\n// }\r\nimport axios from 'axios';\r\nimport React, { useState, ChangeEvent, FormEvent } from 'react';\r\nimport { motion } from \"framer-motion\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface FormData {\r\n    id: string;\r\n    password: string;\r\n}\r\n\r\nconst LoginContainer = styled(motion.div)`\r\n    position: absolute;\r\n    z-index: 1;\r\n    top: 200px;\r\n    left: 0;\r\n    right: 0;\r\n    margin: 0 auto;\r\n    width: 400px;\r\n    height: 200px;\r\n    background-color: rgba(255, 255, 255, 1);\r\n    border-radius: 40px;\r\n    box-shadow: 0 2px 3px rgba(0, 0, 0, 0.1), 0 10px 20px rgba(0, 0, 0, 0.06);\r\n    text-align: center;\r\n`;\r\n\r\n// 모션 변형\r\nconst boxVariants = {\r\n    initial: {\r\n        opacity: 0,\r\n        scale: 0\r\n    },\r\n    visible: {\r\n        opacity: 1,\r\n        scale: 1\r\n    },\r\n    leaving: {\r\n        opacity: 0,\r\n        scale: 0\r\n    }\r\n};\r\n\r\n\r\nexport default function LoginBox() {\r\n    //formData는 현재의 입력 폼 데이터를 저장하는 변수이고, setFormData는 이 데이터를 업데이트하는 함수, useState초기값 + 타입\r\n    const [formData, setFormData] = useState<FormData>({ id: '', password: '' });\r\n    const [loggedInUser, setLoggedInUser] = useState<string | null>(null); // State to hold the logged-in user's name\r\n\r\n    const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n        // 폼이 제출 될 때마다, 새로고침되는 기본적인 이벤트를 취소하는 코드\r\n        e.preventDefault();\r\n        try {\r\n            const response = await axios.post('/login', formData);\r\n            console.log(response.data);\r\n            setLoggedInUser(response.data.name); // Set the logged-in user's name from the response\r\n        } catch (error) {\r\n            console.error('로그인 중 오류가 발생했습니다:', error);\r\n        }\r\n    };\r\n\r\n    // (e: ChangeEvent<HTMLInputElement>) 여기서 input에 발생한 이벤트 값을 'e'객체에 넣어줌.\r\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        // ...formData는 기존의 객체 복사 및 업데이트하여 새로운 객체 생성. e.target.name -> input 'name' 속성. 그리고 해당 name의 입력 된 값 -> e.target.value\r\n        setFormData({ ...formData, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    // JSX를 반환합니다.\r\n    // onSubmit은 폼이 제출될 때, 호출되는 함수를 지정\r\n    // onChange는 입력값이 변경 될 때마다, 호출되는 함수 지정\r\n    return (\r\n        <LoginContainer\r\n            variants={boxVariants}\r\n            initial=\"initial\"\r\n            animate=\"visible\"\r\n            exit=\"leaving\"\r\n        >   \r\n            {loggedInUser ? ( // If a user is logged in, display the welcome message\r\n                <div>\r\n                    환영합니다, {loggedInUser}님!\r\n                </div>\r\n            ) : ( // If no user is logged in, display the login form\r\n                <form onSubmit={handleSubmit}>\r\n                    <label>\r\n                        아이디:\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"id\"\r\n                            value={formData.id}\r\n                            onChange={handleChange}\r\n                        />\r\n                    </label>\r\n                    <br />\r\n                    <label>\r\n                        비밀번호:\r\n                        <input\r\n                            type=\"password\"\r\n                            name=\"password\"\r\n                            value={formData.password}\r\n                            onChange={handleChange}\r\n                        />\r\n                    </label>\r\n                    <br />\r\n                    <button type=\"submit\">로그인</button>\r\n                </form>\r\n            )}\r\n        </LoginContainer>\r\n    );\r\n}\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,IAAIC,QAAQ,QAAgC,OAAO;AAC/D,SAASC,MAAM,QAAQ,eAAe;AACtC,OAAOC,MAAM,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOvC,MAAMC,cAAc,GAAGH,MAAM,CAACD,MAAM,CAACK,GAAG,CAAE;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AAAAC,EAAA,GAfMF,cAAc;AAgBpB,MAAMG,WAAW,GAAG;EAChBC,OAAO,EAAE;IACLC,OAAO,EAAE,CAAC;IACVC,KAAK,EAAE;EACX,CAAC;EACDC,OAAO,EAAE;IACLF,OAAO,EAAE,CAAC;IACVC,KAAK,EAAE;EACX,CAAC;EACDE,OAAO,EAAE;IACLH,OAAO,EAAE,CAAC;IACVC,KAAK,EAAE;EACX;AACJ,CAAC;AAGD,eAAe,SAASG,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAC/B;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAW;IAAEkB,EAAE,EAAE,EAAE;IAAEC,QAAQ,EAAE;EAAG,CAAC,CAAC;EAC5E,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGrB,QAAQ,CAAgB,IAAI,CAAC,CAAC,CAAC;;EAEvE,MAAMsB,YAAY,GAAG,MAAOC,CAA6B,IAAK;IAC1D;IACAA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAM3B,KAAK,CAAC4B,IAAI,CAAC,QAAQ,EAAEV,QAAQ,CAAC;MACrDW,OAAO,CAACC,GAAG,CAACH,QAAQ,CAACI,IAAI,CAAC;MAC1BR,eAAe,CAACI,QAAQ,CAACI,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;IACzC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZJ,OAAO,CAACI,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IAC7C;EACJ,CAAC;;EAED;EACA,MAAMC,YAAY,GAAIT,CAAgC,IAAK;IACvD;IACAN,WAAW,CAAC;MAAE,GAAGD,QAAQ;MAAE,CAACO,CAAC,CAACU,MAAM,CAACH,IAAI,GAAGP,CAAC,CAACU,MAAM,CAACC;IAAM,CAAC,CAAC;EACjE,CAAC;;EAED;EACA;EACA;EACA,oBACI9B,OAAA,CAACC,cAAc;IACX8B,QAAQ,EAAE3B,WAAY;IACtBC,OAAO,EAAC,SAAS;IACjB2B,OAAO,EAAC,SAAS;IACjBC,IAAI,EAAC,SAAS;IAAAC,QAAA,EAEblB,YAAY;IAAA;IAAK;IACdhB,OAAA;MAAAkC,QAAA,GAAK,kCACM,EAAClB,YAAY,EAAC,SACzB;IAAA;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;IAAA;IACJ;IACFtC,OAAA;MAAMuC,QAAQ,EAAErB,YAAa;MAAAgB,QAAA,gBACzBlC,OAAA;QAAAkC,QAAA,GAAO,qBAEH,eAAAlC,OAAA;UACIwC,IAAI,EAAC,MAAM;UACXd,IAAI,EAAC,IAAI;UACTI,KAAK,EAAElB,QAAQ,CAACE,EAAG;UACnB2B,QAAQ,EAAEb;QAAa;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACRtC,OAAA;QAAAmC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACNtC,OAAA;QAAAkC,QAAA,GAAO,2BAEH,eAAAlC,OAAA;UACIwC,IAAI,EAAC,UAAU;UACfd,IAAI,EAAC,UAAU;UACfI,KAAK,EAAElB,QAAQ,CAACG,QAAS;UACzB0B,QAAQ,EAAEb;QAAa;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACRtC,OAAA;QAAAmC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACNtC,OAAA;QAAQwC,IAAI,EAAC,QAAQ;QAAAN,QAAA,EAAC;MAAG;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC;EACT;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAEzB;AAAC3B,EAAA,CAhEuBD,QAAQ;AAAAgC,GAAA,GAARhC,QAAQ;AAAA,IAAAP,EAAA,EAAAuC,GAAA;AAAAC,YAAA,CAAAxC,EAAA;AAAAwC,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}