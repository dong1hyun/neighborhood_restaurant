{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/Users/user/Documents/GitHub/neighborhood_restaurant/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2;// MyLocationBox 컴포넌트 수정\nimport axios from\"axios\";import{useState,useEffect}from\"react\";// useEffect 추가\nimport styled from\"styled-components\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";const Place_Img=styled.img(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n    margin: 0 auto;\\n    margin-top: 40px;\\n    width: 80%;\\n    height: 300px;\\n    border-radius: 10px;\\n\"])));const LocationText=styled.p(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n    color: white; // \\uAE00\\uC790\\uC0C9\\uC744 \\uD558\\uC580\\uC0C9\\uC73C\\uB85C \\uC124\\uC815\\n\"])));export default function MyLocationBox(_ref){let{userId}=_ref;const[coordinates,setCoordinates]=useState({x:null,y:null});useEffect(()=>{const handleSaveLocation=async()=>{try{navigator.geolocation.getCurrentPosition(async position=>{const{latitude,longitude}=position.coords;setCoordinates({x:longitude,y:latitude});console.log('현재 위치 좌표:',longitude,latitude);// 콘솔에 좌표 출력\nconsole.log('사용자 ID:',userId);// 콘솔에 사용자 ID 출력\nawait axios.post('/location',{id:userId,x:longitude,y:latitude});alert('위치가 성공적으로 저장되었습니다.');});}catch(error){console.error('위치 저장 중 오류가 발생했습니다:',error);alert('위치를 저장하는 도중 오류가 발생했습니다.');}};handleSaveLocation();// 컴포넌트가 렌더링될 때 위치 저장 함수 호출\n},[userId]);// userId가 변경될 때마다 실행\nreturn/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(LocationText,{children:[\"\\uD604\\uC7AC \\uC704\\uCE58 \\uC88C\\uD45C: \",coordinates.x,\", \",coordinates.y]})});}","map":{"version":3,"names":["axios","useState","useEffect","styled","jsxs","_jsxs","jsx","_jsx","Place_Img","img","_templateObject","_taggedTemplateLiteral","LocationText","p","_templateObject2","MyLocationBox","_ref","userId","coordinates","setCoordinates","x","y","handleSaveLocation","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","console","log","post","id","alert","error","children"],"sources":["C:/Users/user/Documents/GitHub/neighborhood_restaurant/client/src/components/MyLocationBox.tsx"],"sourcesContent":["// MyLocationBox 컴포넌트 수정\r\nimport axios from \"axios\";\r\nimport { useState, useEffect } from \"react\"; // useEffect 추가\r\nimport styled from \"styled-components\";\r\n\r\ninterface MyLocationBoxProps {\r\n    userId: string; // 사용자 id\r\n}\r\n\r\nconst Place_Img = styled.img`\r\n    margin: 0 auto;\r\n    margin-top: 40px;\r\n    width: 80%;\r\n    height: 300px;\r\n    border-radius: 10px;\r\n`;\r\n\r\nconst LocationText = styled.p`\r\n    color: white; // 글자색을 하얀색으로 설정\r\n`;\r\n\r\nexport default function MyLocationBox({ userId }: MyLocationBoxProps) {\r\n    const [coordinates, setCoordinates] = useState<{ x: number | null, y: number | null }>({ x: null, y: null });\r\n\r\n    useEffect(() => {\r\n        const handleSaveLocation = async () => {\r\n            try {\r\n                navigator.geolocation.getCurrentPosition(async (position) => {\r\n                    const { latitude, longitude } = position.coords;\r\n                    setCoordinates({ x: longitude, y: latitude });\r\n                    \r\n                    console.log('현재 위치 좌표:', longitude, latitude); // 콘솔에 좌표 출력\r\n                    console.log('사용자 ID:', userId); // 콘솔에 사용자 ID 출력\r\n                    \r\n                    await axios.post('/location', { id: userId, x: longitude, y: latitude });\r\n                    alert('위치가 성공적으로 저장되었습니다.');\r\n                });\r\n            } catch (error) {\r\n                console.error('위치 저장 중 오류가 발생했습니다:', error);\r\n                alert('위치를 저장하는 도중 오류가 발생했습니다.');\r\n            }\r\n        };\r\n\r\n        handleSaveLocation(); // 컴포넌트가 렌더링될 때 위치 저장 함수 호출\r\n    }, [userId]); // userId가 변경될 때마다 실행\r\n\r\n    return (\r\n        <div>\r\n            {/* 버튼 클릭없이 자동으로 위치 저장 */}\r\n            {/* 버튼 및 관련 텍스트 삭제 */}\r\n            {/* LocationText로 변경 */}\r\n            <LocationText>현재 위치 좌표: {coordinates.x}, {coordinates.y}</LocationText>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"wMAAA;AACA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAAE;AAC7C,MAAO,CAAAC,MAAM,KAAM,mBAAmB,CAAC,OAAAC,IAAA,IAAAC,KAAA,gCAAAC,GAAA,IAAAC,IAAA,yBAMvC,KAAM,CAAAC,SAAS,CAAGL,MAAM,CAACM,GAAG,CAAAC,eAAA,GAAAA,eAAA,CAAAC,sBAAA,qHAM3B,CAED,KAAM,CAAAC,YAAY,CAAGT,MAAM,CAACU,CAAC,CAAAC,gBAAA,GAAAA,gBAAA,CAAAH,sBAAA,qGAE5B,CAED,cAAe,SAAS,CAAAI,aAAaA,CAAAC,IAAA,CAAiC,IAAhC,CAAEC,MAA2B,CAAC,CAAAD,IAAA,CAChE,KAAM,CAACE,WAAW,CAAEC,cAAc,CAAC,CAAGlB,QAAQ,CAAyC,CAAEmB,CAAC,CAAE,IAAI,CAAEC,CAAC,CAAE,IAAK,CAAC,CAAC,CAE5GnB,SAAS,CAAC,IAAM,CACZ,KAAM,CAAAoB,kBAAkB,CAAG,KAAAA,CAAA,GAAY,CACnC,GAAI,CACAC,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAAC,KAAO,CAAAC,QAAQ,EAAK,CACzD,KAAM,CAAEC,QAAQ,CAAEC,SAAU,CAAC,CAAGF,QAAQ,CAACG,MAAM,CAC/CV,cAAc,CAAC,CAAEC,CAAC,CAAEQ,SAAS,CAAEP,CAAC,CAAEM,QAAS,CAAC,CAAC,CAE7CG,OAAO,CAACC,GAAG,CAAC,WAAW,CAAEH,SAAS,CAAED,QAAQ,CAAC,CAAE;AAC/CG,OAAO,CAACC,GAAG,CAAC,SAAS,CAAEd,MAAM,CAAC,CAAE;AAEhC,KAAM,CAAAjB,KAAK,CAACgC,IAAI,CAAC,WAAW,CAAE,CAAEC,EAAE,CAAEhB,MAAM,CAAEG,CAAC,CAAEQ,SAAS,CAAEP,CAAC,CAAEM,QAAS,CAAC,CAAC,CACxEO,KAAK,CAAC,oBAAoB,CAAC,CAC/B,CAAC,CAAC,CACN,CAAE,MAAOC,KAAK,CAAE,CACZL,OAAO,CAACK,KAAK,CAAC,qBAAqB,CAAEA,KAAK,CAAC,CAC3CD,KAAK,CAAC,yBAAyB,CAAC,CACpC,CACJ,CAAC,CAEDZ,kBAAkB,CAAC,CAAC,CAAE;AAC1B,CAAC,CAAE,CAACL,MAAM,CAAC,CAAC,CAAE;AAEd,mBACIV,IAAA,QAAA6B,QAAA,cAII/B,KAAA,CAACO,YAAY,EAAAwB,QAAA,EAAC,0CAAU,CAAClB,WAAW,CAACE,CAAC,CAAC,IAAE,CAACF,WAAW,CAACG,CAAC,EAAe,CAAC,CACtE,CAAC,CAEd"},"metadata":{},"sourceType":"module","externalDependencies":[]}