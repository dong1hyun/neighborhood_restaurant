{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Documents\\\\GitHub\\\\neighborhood_restaurant\\\\client\\\\src\\\\components\\\\home\\\\LocationSet.tsx\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LocationContainer = styled.div`\n    margin: auto;\n    border-radius: 10px;\n    width: 95%;\n    height: 200px;\n    box-shadow: 5px 2px 10px rgba(0, 0, 0, 0.1), 0 10px 20px rgba(0, 0, 0, 0.2);\n    background-color: #2275eb97;\n    margin-top: 30px;\n    margin-bottom: 50px;\n    text-align: center;\n`;\n_c = LocationContainer;\nconst GetLocationButton = styled.button`\n    background-color: white;\n    color: black;\n    border: none;\n    padding: 8px 16px;\n    border-radius: 5px;\n    margin-top: 40px;\n    cursor: pointer;\n`;\n_c2 = GetLocationButton;\nconst SetLocationButton = styled.button`\n    background-color: white;\n    color: black;\n    border: none;\n    padding: 8px 16px;\n    border-radius: 5px;\n    cursor: pointer;\n`;\n_c3 = SetLocationButton;\nconst LocationForm = styled.form`\nmargin-top: 40px;\n`;\n_c4 = LocationForm;\nconst LocationInput = styled.input`\n    width: 300px;\n    height: 30px;\n    border-radius: 5px;\n    border: none;\n    margin-right: 10px;\n    margin-bottom: 10px;\n    padding-left: 10px;\n`;\n_c5 = LocationInput;\nexport default function LocaionSet() {\n  _s();\n  const [searchResult, setSearchResult] = useState('');\n  const [userLocation, setUserLocation] = useState(null);\n  const [userAddress, setUserAddress] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [sessionID, setSessionID] = useState('');\n  const {\n    register,\n    handleSubmit\n  } = useForm();\n  const handleSearch = async ({\n    location\n  }) => {\n    try {\n      const response = await axios.get(`https://dapi.kakao.com/v2/local/search/keyword.json?query=${location}`, {\n        headers: {\n          Authorization: \"KakaoAK f1a6ff5fce786c3d0407226bb3e8ec57\"\n        }\n      });\n      if (response.data.documents && response.data.documents.length > 0) {\n        const {\n          address_name\n        } = response.data.documents[0];\n        setSearchResult(address_name);\n        if (isAddressMatch(address_name, userAddress)) {\n          console.log('검색된 위치와 사용자 위치가 동일합니다.');\n          // 여기서 서버로 값을 보내는 작업 수행\n          sendLocationToServer(sessionID, address_name);\n        } else {\n          console.log('검색된 위치와 사용자 위치가 동일하지 않습니다.');\n        }\n      } else {\n        console.error('검색 결과를 찾을 수 없습니다.');\n      }\n    } catch (error) {\n      console.error('검색 중 오류가 발생했습니다:', error);\n    }\n  };\n  const getAddressFromCoordinates = async (latitude, longitude) => {\n    try {\n      const response = await axios.get(`https://dapi.kakao.com/v2/local/geo/coord2address.json?x=${longitude}&y=${latitude}`, {\n        headers: {\n          Authorization: \"KakaoAK f1a6ff5fce786c3d0407226bb3e8ec57\"\n        }\n      });\n      if (response.data.documents && response.data.documents.length > 0) {\n        const address = response.data.documents[0].address.address_name;\n        return address;\n      } else {\n        console.error('주소를 찾을 수 없습니다.');\n        return null;\n      }\n    } catch (error) {\n      console.error('주소를 가져오는 중 오류가 발생했습니다:', error);\n      return null;\n    }\n  };\n  const handleGetUserLocation = () => {\n    navigator.geolocation.getCurrentPosition(async position => {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      setUserLocation({\n        x: longitude,\n        y: latitude\n      });\n      const address = await getAddressFromCoordinates(latitude, longitude);\n      if (address) {\n        setUserAddress(address);\n        console.log('사용자의 위치:', address);\n      }\n    });\n  };\n  const isAddressMatch = (address1, address2) => {\n    const regex = /(.+?(읍|면|동))/;\n    const match1 = address1.match(regex);\n    const match2 = address2.match(regex);\n    return !!match1 && !!match2 && match1[1] === match2[1];\n  };\n  const sendLocationToServer = async (sessionID, address) => {\n    try {\n      // 주소에서 숫자를 제거합니다.\n      const cleanedAddress = address.replace(/\\d+/g, '').trim().replace(/-$/, '');\n      const response = await axios.post('/location', {\n        sessionID,\n        address: cleanedAddress\n      });\n      console.log('서버 응답:', response.data);\n    } catch (error) {\n      console.error('서버로 위치 전송 중 오류가 발생했습니다:', error);\n    }\n  };\n  useEffect(() => {\n    const loggedInSessionID = sessionStorage.getItem('sessionID') + '';\n    setSessionID(loggedInSessionID);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(LocationContainer, {\n    children: [/*#__PURE__*/_jsxDEV(GetLocationButton, {\n      onClick: handleGetUserLocation,\n      children: \"\\uB0B4 \\uC704\\uCE58 \\uAC00\\uC838\\uC624\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LocationForm, {\n      onSubmit: handleSubmit(handleSearch),\n      children: [/*#__PURE__*/_jsxDEV(LocationInput, {\n        placeholder: \"\\uC790\\uC2E0\\uC774 \\uC18D\\uD55C \\uC74D/\\uBA74/\\uB3D9\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694!\",\n        value: searchTerm // searchTerm 값으로 입력란의 값 설정\n        ,\n        onChange: e => setSearchTerm(e.target.value) // 입력값 변경 시 searchTerm 업데이트\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SetLocationButton, {\n        type: \"submit\",\n        children: \"\\uC778\\uC99D\\uD558\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 9\n  }, this);\n}\n_s(LocaionSet, \"Ov5wmOJjwz/gsCvKxf17vytUaJM=\", false, function () {\n  return [useForm];\n});\n_c6 = LocaionSet;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"LocationContainer\");\n$RefreshReg$(_c2, \"GetLocationButton\");\n$RefreshReg$(_c3, \"SetLocationButton\");\n$RefreshReg$(_c4, \"LocationForm\");\n$RefreshReg$(_c5, \"LocationInput\");\n$RefreshReg$(_c6, \"LocaionSet\");","map":{"version":3,"names":["axios","useEffect","useState","useForm","styled","jsxDEV","_jsxDEV","LocationContainer","div","_c","GetLocationButton","button","_c2","SetLocationButton","_c3","LocationForm","form","_c4","LocationInput","input","_c5","LocaionSet","_s","searchResult","setSearchResult","userLocation","setUserLocation","userAddress","setUserAddress","searchTerm","setSearchTerm","sessionID","setSessionID","register","handleSubmit","handleSearch","location","response","get","headers","Authorization","data","documents","length","address_name","isAddressMatch","console","log","sendLocationToServer","error","getAddressFromCoordinates","latitude","longitude","address","handleGetUserLocation","navigator","geolocation","getCurrentPosition","position","coords","x","y","address1","address2","regex","match1","match","match2","cleanedAddress","replace","trim","post","loggedInSessionID","sessionStorage","getItem","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","placeholder","value","onChange","e","target","type","_c6","$RefreshReg$"],"sources":["C:/Users/user/Documents/GitHub/neighborhood_restaurant/client/src/components/home/LocationSet.tsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport styled from \"styled-components\";\r\n\r\nconst LocationContainer = styled.div`\r\n    margin: auto;\r\n    border-radius: 10px;\r\n    width: 95%;\r\n    height: 200px;\r\n    box-shadow: 5px 2px 10px rgba(0, 0, 0, 0.1), 0 10px 20px rgba(0, 0, 0, 0.2);\r\n    background-color: #2275eb97;\r\n    margin-top: 30px;\r\n    margin-bottom: 50px;\r\n    text-align: center;\r\n`\r\n\r\nconst GetLocationButton = styled.button`\r\n    background-color: white;\r\n    color: black;\r\n    border: none;\r\n    padding: 8px 16px;\r\n    border-radius: 5px;\r\n    margin-top: 40px;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst SetLocationButton = styled.button`\r\n    background-color: white;\r\n    color: black;\r\n    border: none;\r\n    padding: 8px 16px;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst LocationForm = styled.form`\r\nmargin-top: 40px;\r\n`;\r\n\r\nconst LocationInput = styled.input`\r\n    width: 300px;\r\n    height: 30px;\r\n    border-radius: 5px;\r\n    border: none;\r\n    margin-right: 10px;\r\n    margin-bottom: 10px;\r\n    padding-left: 10px;\r\n`;\r\n\r\ninterface searchForm {\r\n    location: string\r\n}\r\n\r\nexport default function LocaionSet() {\r\n    const [searchResult, setSearchResult] = useState<string>('');\r\n    const [userLocation, setUserLocation] = useState<{ x: number, y: number } | null>(null);\r\n    const [userAddress, setUserAddress] = useState<string>('');\r\n    const [searchTerm, setSearchTerm] = useState<string>('');\r\n    const [sessionID, setSessionID] = useState<string>('');\r\n    const { register, handleSubmit } = useForm<searchForm>();\r\n    const handleSearch = async ({location}: searchForm) => {\r\n        try {\r\n            const response = await axios.get(`https://dapi.kakao.com/v2/local/search/keyword.json?query=${location}`, {\r\n                headers: {\r\n                    Authorization: \"KakaoAK f1a6ff5fce786c3d0407226bb3e8ec57\"\r\n                }\r\n            });\r\n            if (response.data.documents && response.data.documents.length > 0) {\r\n                const { address_name } = response.data.documents[0];\r\n                setSearchResult(address_name);\r\n                if (isAddressMatch(address_name, userAddress)) {\r\n                    console.log('검색된 위치와 사용자 위치가 동일합니다.');\r\n                    // 여기서 서버로 값을 보내는 작업 수행\r\n                    sendLocationToServer(sessionID, address_name);\r\n                } else {\r\n                    console.log('검색된 위치와 사용자 위치가 동일하지 않습니다.');\r\n                }\r\n            } else {\r\n                console.error('검색 결과를 찾을 수 없습니다.');\r\n            }\r\n        } catch (error) {\r\n            console.error('검색 중 오류가 발생했습니다:', error);\r\n        }\r\n    };\r\n\r\n    const getAddressFromCoordinates = async (latitude: number, longitude: number) => {\r\n        try {\r\n            const response = await axios.get(`https://dapi.kakao.com/v2/local/geo/coord2address.json?x=${longitude}&y=${latitude}`, {\r\n                headers: {\r\n                    Authorization: \"KakaoAK f1a6ff5fce786c3d0407226bb3e8ec57\"\r\n                }\r\n            });\r\n            if (response.data.documents && response.data.documents.length > 0) {\r\n                const address = response.data.documents[0].address.address_name;\r\n                return address;\r\n            } else {\r\n                console.error('주소를 찾을 수 없습니다.');\r\n                return null;\r\n            }\r\n        } catch (error) {\r\n            console.error('주소를 가져오는 중 오류가 발생했습니다:', error);\r\n            return null;\r\n        }\r\n    };\r\n\r\n    const handleGetUserLocation = () => {\r\n        navigator.geolocation.getCurrentPosition(async (position) => {\r\n            const { latitude, longitude } = position.coords;\r\n            setUserLocation({ x: longitude, y: latitude });\r\n            const address = await getAddressFromCoordinates(latitude, longitude);\r\n            if (address) {\r\n                setUserAddress(address);\r\n                console.log('사용자의 위치:', address);\r\n            }\r\n        });\r\n    };\r\n\r\n    const isAddressMatch = (address1: string, address2: string): boolean => {\r\n        const regex = /(.+?(읍|면|동))/;\r\n        const match1 = address1.match(regex);\r\n        const match2 = address2.match(regex);\r\n        return !!match1 && !!match2 && match1[1] === match2[1];\r\n    };\r\n\r\n    const sendLocationToServer = async (sessionID: string, address: string) => {\r\n        try {\r\n            // 주소에서 숫자를 제거합니다.\r\n            const cleanedAddress = address.replace(/\\d+/g, '').trim().replace(/-$/, '');\r\n            \r\n            const response = await axios.post('/location', { sessionID, address: cleanedAddress });\r\n            console.log('서버 응답:', response.data);\r\n        } catch (error) {\r\n            console.error('서버로 위치 전송 중 오류가 발생했습니다:', error);\r\n        }\r\n    };\r\n    \r\n\r\n    useEffect(() => {\r\n        const loggedInSessionID = sessionStorage.getItem('sessionID') + '';\r\n        setSessionID(loggedInSessionID);\r\n    }, [])\r\n    return (\r\n        <LocationContainer>\r\n            <GetLocationButton onClick={handleGetUserLocation}>내 위치 가져오기</GetLocationButton>\r\n            <LocationForm onSubmit={handleSubmit(handleSearch)}>\r\n                <LocationInput\r\n                    placeholder=\"자신이 속한 읍/면/동을 입력해주세요!\"\r\n                    value={searchTerm} // searchTerm 값으로 입력란의 값 설정\r\n                    onChange={(e) => setSearchTerm(e.target.value)} // 입력값 변경 시 searchTerm 업데이트\r\n                />\r\n                <SetLocationButton type=\"submit\">인증하기</SetLocationButton>\r\n            </LocationForm>\r\n        </LocationContainer>\r\n    );\r\n    \r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}