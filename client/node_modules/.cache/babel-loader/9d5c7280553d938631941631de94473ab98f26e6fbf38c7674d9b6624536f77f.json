{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/Users/user/Documents/GitHub/neighborhood_restaurant/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject;import axios from'axios';import React,{useState}from'react';import{motion}from\"framer-motion\";import styled from\"styled-components\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const LoginContainer=styled(motion.div)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n    position: absolute;\\n    z-index: 1;\\n    top: 200px;\\n    left: 0;\\n    right: 0;\\n    margin: 0 auto;\\n    width: 400px;\\n    height: 200px;\\n    background-color: rgba(255, 255, 255, 1);\\n    border-radius: 40px;\\n    box-shadow: 0 2px 3px rgba(0, 0, 0, 0.1), 0 10px 20px rgba(0, 0, 0, 0.06);\\n    text-align: center;\\n\"])));// 모션 변형\nconst boxVariants={initial:{opacity:0,scale:0},visible:{opacity:1,scale:1},leaving:{opacity:0,scale:0}};export default function LoginBox(){//formData는 현재의 입력 폼 데이터를 저장하는 변수이고, setFormData는 이 데이터를 업데이트하는 함수, useState초기값 + 타입\nconst[formData,setFormData]=useState({username:'',password:''});const handleSubmit=async e=>{// 폼이 제출 될 때마다, 새로고침되는 기본적인 이벤트를 취소하는 코드\ne.preventDefault();try{const response=await axios.post('/login',formData);console.log(response.data);}catch(error){console.error('로그인 중 오류가 발생했습니다:',error);}};// (e: ChangeEvent<HTMLInputElement>) 여기서 input에 발생한 이벤트 값을 'e'객체에 넣어줌.\nconst handleChange=e=>{// ...formData는 기존의 객체 복사 및 업데이트하여 새로운 객체 생성. e.target.name -> input 'name' 속성. 그리고 해당 name의 입력 된 값 -> e.target.value\nsetFormData({...formData,[e.target.name]:e.target.value});};// JSX를 반환합니다.\n// onSubmit은 폼이 제출될 때, 호출되는 함수를 지정\n// onChange는 입력값이 변경 될 때마다, 호출되는 함수 지정\nreturn/*#__PURE__*/_jsx(LoginContainer,{variants:boxVariants,initial:\"initial\",animate:\"visible\",exit:\"leaving\",children:/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"\\uC544\\uC774\\uB514:\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"username\",value:formData.username,onChange:handleChange})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"label\",{children:[\"\\uBE44\\uBC00\\uBC88\\uD638:\",/*#__PURE__*/_jsx(\"input\",{type:\"password\",name:\"password\",value:formData.password,onChange:handleChange})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"\\uB85C\\uADF8\\uC778\"})]})});}","map":{"version":3,"names":["axios","React","useState","motion","styled","jsx","_jsx","jsxs","_jsxs","LoginContainer","div","_templateObject","_taggedTemplateLiteral","boxVariants","initial","opacity","scale","visible","leaving","LoginBox","formData","setFormData","username","password","handleSubmit","e","preventDefault","response","post","console","log","data","error","handleChange","target","name","value","variants","animate","exit","children","onSubmit","type","onChange"],"sources":["C:/Users/user/Documents/GitHub/neighborhood_restaurant/client/src/components/LoginBox.tsx"],"sourcesContent":["import axios from 'axios';\r\nimport React, { useState, ChangeEvent, FormEvent } from 'react';\r\nimport { motion } from \"framer-motion\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface FormData {\r\n    username: string;\r\n    password: string;\r\n}\r\n\r\nconst LoginContainer = styled(motion.div)`\r\n    position: absolute;\r\n    z-index: 1;\r\n    top: 200px;\r\n    left: 0;\r\n    right: 0;\r\n    margin: 0 auto;\r\n    width: 400px;\r\n    height: 200px;\r\n    background-color: rgba(255, 255, 255, 1);\r\n    border-radius: 40px;\r\n    box-shadow: 0 2px 3px rgba(0, 0, 0, 0.1), 0 10px 20px rgba(0, 0, 0, 0.06);\r\n    text-align: center;\r\n`;\r\n\r\n// 모션 변형\r\nconst boxVariants = {\r\n    initial: {\r\n        opacity: 0,\r\n        scale: 0\r\n    },\r\n    visible: {\r\n        opacity: 1,\r\n        scale: 1\r\n    },\r\n    leaving: {\r\n        opacity: 0,\r\n        scale: 0\r\n    }\r\n};\r\n\r\n\r\nexport default function LoginBox() {\r\n    //formData는 현재의 입력 폼 데이터를 저장하는 변수이고, setFormData는 이 데이터를 업데이트하는 함수, useState초기값 + 타입\r\n    const [formData, setFormData] = useState<FormData>({ username: '', password: '' });\r\n\r\n    const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n        // 폼이 제출 될 때마다, 새로고침되는 기본적인 이벤트를 취소하는 코드\r\n        e.preventDefault();\r\n        try {\r\n            const response = await axios.post('/login', formData);\r\n            console.log(response.data);\r\n        } catch (error) {\r\n            console.error('로그인 중 오류가 발생했습니다:', error);\r\n        }\r\n    };\r\n\r\n    // (e: ChangeEvent<HTMLInputElement>) 여기서 input에 발생한 이벤트 값을 'e'객체에 넣어줌.\r\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        // ...formData는 기존의 객체 복사 및 업데이트하여 새로운 객체 생성. e.target.name -> input 'name' 속성. 그리고 해당 name의 입력 된 값 -> e.target.value\r\n        setFormData({ ...formData, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    // JSX를 반환합니다.\r\n    // onSubmit은 폼이 제출될 때, 호출되는 함수를 지정\r\n    // onChange는 입력값이 변경 될 때마다, 호출되는 함수 지정\r\n    return (\r\n        <LoginContainer\r\n            variants={boxVariants}\r\n            initial=\"initial\"\r\n            animate=\"visible\"\r\n            exit=\"leaving\"\r\n        >   \r\n            <form onSubmit={handleSubmit}>\r\n                <label>\r\n                    아이디:\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"username\"\r\n                        value={formData.username}\r\n                        onChange={handleChange}\r\n                    />\r\n                </label>\r\n                <br />\r\n                <label>\r\n                    비밀번호:\r\n                    <input\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        value={formData.password}\r\n                        onChange={handleChange}\r\n                    />\r\n                </label>\r\n                <br />\r\n                <button type=\"submit\">로그인</button>\r\n            </form>\r\n        </LoginContainer>\r\n    );\r\n}\r\n"],"mappings":"uLAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,KAAK,EAAIC,QAAQ,KAAgC,OAAO,CAC/D,OAASC,MAAM,KAAQ,eAAe,CACtC,MAAO,CAAAC,MAAM,KAAM,mBAAmB,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAOvC,KAAM,CAAAC,cAAc,CAAGL,MAAM,CAACD,MAAM,CAACO,GAAG,CAAC,CAAAC,eAAA,GAAAA,eAAA,CAAAC,sBAAA,gVAaxC,CAED;AACA,KAAM,CAAAC,WAAW,CAAG,CAChBC,OAAO,CAAE,CACLC,OAAO,CAAE,CAAC,CACVC,KAAK,CAAE,CACX,CAAC,CACDC,OAAO,CAAE,CACLF,OAAO,CAAE,CAAC,CACVC,KAAK,CAAE,CACX,CAAC,CACDE,OAAO,CAAE,CACLH,OAAO,CAAE,CAAC,CACVC,KAAK,CAAE,CACX,CACJ,CAAC,CAGD,cAAe,SAAS,CAAAG,QAAQA,CAAA,CAAG,CAC/B;AACA,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGnB,QAAQ,CAAW,CAAEoB,QAAQ,CAAE,EAAE,CAAEC,QAAQ,CAAE,EAAG,CAAC,CAAC,CAElF,KAAM,CAAAC,YAAY,CAAG,KAAO,CAAAC,CAA6B,EAAK,CAC1D;AACAA,CAAC,CAACC,cAAc,CAAC,CAAC,CAClB,GAAI,CACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAA3B,KAAK,CAAC4B,IAAI,CAAC,QAAQ,CAAER,QAAQ,CAAC,CACrDS,OAAO,CAACC,GAAG,CAACH,QAAQ,CAACI,IAAI,CAAC,CAC9B,CAAE,MAAOC,KAAK,CAAE,CACZH,OAAO,CAACG,KAAK,CAAC,mBAAmB,CAAEA,KAAK,CAAC,CAC7C,CACJ,CAAC,CAED;AACA,KAAM,CAAAC,YAAY,CAAIR,CAAgC,EAAK,CACvD;AACAJ,WAAW,CAAC,CAAE,GAAGD,QAAQ,CAAE,CAACK,CAAC,CAACS,MAAM,CAACC,IAAI,EAAGV,CAAC,CAACS,MAAM,CAACE,KAAM,CAAC,CAAC,CACjE,CAAC,CAED;AACA;AACA;AACA,mBACI9B,IAAA,CAACG,cAAc,EACX4B,QAAQ,CAAExB,WAAY,CACtBC,OAAO,CAAC,SAAS,CACjBwB,OAAO,CAAC,SAAS,CACjBC,IAAI,CAAC,SAAS,CAAAC,QAAA,cAEdhC,KAAA,SAAMiC,QAAQ,CAAEjB,YAAa,CAAAgB,QAAA,eACzBhC,KAAA,UAAAgC,QAAA,EAAO,qBAEH,cAAAlC,IAAA,UACIoC,IAAI,CAAC,MAAM,CACXP,IAAI,CAAC,UAAU,CACfC,KAAK,CAAEhB,QAAQ,CAACE,QAAS,CACzBqB,QAAQ,CAAEV,YAAa,CAC1B,CAAC,EACC,CAAC,cACR3B,IAAA,QAAK,CAAC,cACNE,KAAA,UAAAgC,QAAA,EAAO,2BAEH,cAAAlC,IAAA,UACIoC,IAAI,CAAC,UAAU,CACfP,IAAI,CAAC,UAAU,CACfC,KAAK,CAAEhB,QAAQ,CAACG,QAAS,CACzBoB,QAAQ,CAAEV,YAAa,CAC1B,CAAC,EACC,CAAC,cACR3B,IAAA,QAAK,CAAC,cACNA,IAAA,WAAQoC,IAAI,CAAC,QAAQ,CAAAF,QAAA,CAAC,oBAAG,CAAQ,CAAC,EAChC,CAAC,CACK,CAAC,CAEzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}