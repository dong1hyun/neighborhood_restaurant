{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/Users/user/Documents/GitHub/neighborhood_restaurant/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject;import axios from\"axios\";import{useState}from\"react\";import styled from\"styled-components\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const Place_Img=styled.img(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n    margin: 0 auto;\\n    margin-top: 40px;\\n    width: 80%;\\n    height: 300px;\\n    border-radius: 10px;\\n\"])));// 모션 변형\nconst boxVariants={initial:{opacity:0,scale:0},visible:{opacity:1,scale:1},leaving:{opacity:0,scale:0}};export default function MyLocationBox(_ref){let{id}=_ref;const[coordinates,setCoordinates]=useState({x:null,y:null});const handleSaveLocation=async()=>{try{// 사용자의 현재 위치를 가져오는 Geolocation API를 사용합니다.\nnavigator.geolocation.getCurrentPosition(async position=>{const{latitude,longitude}=position.coords;setCoordinates({x:longitude,y:latitude});// 좌표 정보 업데이트\n// 좌표를 서버로 전송하여 사용자의 데이터베이스에 저장합니다.\nawait axios.post('/location',{id,x:longitude,y:latitude});alert('위치가 성공적으로 저장되었습니다.');});}catch(error){console.error('위치 저장 중 오류가 발생했습니다:',error);alert('위치를 저장하는 도중 오류가 발생했습니다.');}};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"button\",{onClick:handleSaveLocation,children:\"\\uB0B4 \\uC704\\uCE58 \\uC800\\uC7A5\"}),\" \",/*#__PURE__*/_jsxs(\"p\",{children:[\"\\uD604\\uC7AC \\uC704\\uCE58 \\uC88C\\uD45C: \",coordinates.x,\", \",coordinates.y]})]});}","map":{"version":3,"names":["axios","useState","styled","jsx","_jsx","jsxs","_jsxs","Place_Img","img","_templateObject","_taggedTemplateLiteral","boxVariants","initial","opacity","scale","visible","leaving","MyLocationBox","_ref","id","coordinates","setCoordinates","x","y","handleSaveLocation","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","post","alert","error","console","children","onClick"],"sources":["C:/Users/user/Documents/GitHub/neighborhood_restaurant/client/src/components/MyloctionBox.tsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface MyLocationBoxProps {\r\n    id: string; // id 변수의 타입을 명시적으로 지정\r\n}\r\n\r\nconst Place_Img = styled.img`\r\n    margin: 0 auto;\r\n    margin-top: 40px;\r\n    width: 80%;\r\n    height: 300px;\r\n    border-radius: 10px;\r\n`\r\n\r\n// 모션 변형\r\nconst boxVariants = {\r\n    initial: {\r\n        opacity: 0,\r\n        scale: 0\r\n    },\r\n    visible: {\r\n        opacity: 1,\r\n        scale: 1\r\n    },\r\n    leaving: {\r\n        opacity: 0,\r\n        scale: 0\r\n    }\r\n};\r\n\r\nexport default function MyLocationBox({ id }: MyLocationBoxProps) {\r\n    const [coordinates, setCoordinates] = useState<{ x: number | null, y: number | null }>({ x: null, y: null });\r\n\r\n    const handleSaveLocation = async () => {\r\n        try {\r\n            // 사용자의 현재 위치를 가져오는 Geolocation API를 사용합니다.\r\n            navigator.geolocation.getCurrentPosition(async (position) => {\r\n                const { latitude, longitude } = position.coords;\r\n                setCoordinates({ x: longitude, y: latitude }); // 좌표 정보 업데이트\r\n\r\n                // 좌표를 서버로 전송하여 사용자의 데이터베이스에 저장합니다.\r\n                await axios.post('/location', { id, x: longitude, y: latitude });\r\n                alert('위치가 성공적으로 저장되었습니다.');\r\n            });\r\n        } catch (error) {\r\n            console.error('위치 저장 중 오류가 발생했습니다:', error);\r\n            alert('위치를 저장하는 도중 오류가 발생했습니다.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={handleSaveLocation}>내 위치 저장</button> {/* 위치 저장 버튼 */}\r\n            <p>현재 위치 좌표: {coordinates.x}, {coordinates.y}</p>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"uLAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAAoBC,QAAQ,KAAQ,OAAO,CAE3C,MAAO,CAAAC,MAAM,KAAM,mBAAmB,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAMvC,KAAM,CAAAC,SAAS,CAAGL,MAAM,CAACM,GAAG,CAAAC,eAAA,GAAAA,eAAA,CAAAC,sBAAA,qHAM3B,CAED;AACA,KAAM,CAAAC,WAAW,CAAG,CAChBC,OAAO,CAAE,CACLC,OAAO,CAAE,CAAC,CACVC,KAAK,CAAE,CACX,CAAC,CACDC,OAAO,CAAE,CACLF,OAAO,CAAE,CAAC,CACVC,KAAK,CAAE,CACX,CAAC,CACDE,OAAO,CAAE,CACLH,OAAO,CAAE,CAAC,CACVC,KAAK,CAAE,CACX,CACJ,CAAC,CAED,cAAe,SAAS,CAAAG,aAAaA,CAAAC,IAAA,CAA6B,IAA5B,CAAEC,EAAuB,CAAC,CAAAD,IAAA,CAC5D,KAAM,CAACE,WAAW,CAAEC,cAAc,CAAC,CAAGpB,QAAQ,CAAyC,CAAEqB,CAAC,CAAE,IAAI,CAAEC,CAAC,CAAE,IAAK,CAAC,CAAC,CAE5G,KAAM,CAAAC,kBAAkB,CAAG,KAAAA,CAAA,GAAY,CACnC,GAAI,CACA;AACAC,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAAC,KAAO,CAAAC,QAAQ,EAAK,CACzD,KAAM,CAAEC,QAAQ,CAAEC,SAAU,CAAC,CAAGF,QAAQ,CAACG,MAAM,CAC/CV,cAAc,CAAC,CAAEC,CAAC,CAAEQ,SAAS,CAAEP,CAAC,CAAEM,QAAS,CAAC,CAAC,CAAE;AAE/C;AACA,KAAM,CAAA7B,KAAK,CAACgC,IAAI,CAAC,WAAW,CAAE,CAAEb,EAAE,CAAEG,CAAC,CAAEQ,SAAS,CAAEP,CAAC,CAAEM,QAAS,CAAC,CAAC,CAChEI,KAAK,CAAC,oBAAoB,CAAC,CAC/B,CAAC,CAAC,CACN,CAAE,MAAOC,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,qBAAqB,CAAEA,KAAK,CAAC,CAC3CD,KAAK,CAAC,yBAAyB,CAAC,CACpC,CACJ,CAAC,CAED,mBACI3B,KAAA,QAAA8B,QAAA,eACIhC,IAAA,WAAQiC,OAAO,CAAEb,kBAAmB,CAAAY,QAAA,CAAC,kCAAO,CAAQ,CAAC,IAAC,cACtD9B,KAAA,MAAA8B,QAAA,EAAG,0CAAU,CAAChB,WAAW,CAACE,CAAC,CAAC,IAAE,CAACF,WAAW,CAACG,CAAC,EAAI,CAAC,EAChD,CAAC,CAEd"},"metadata":{},"sourceType":"module","externalDependencies":[]}