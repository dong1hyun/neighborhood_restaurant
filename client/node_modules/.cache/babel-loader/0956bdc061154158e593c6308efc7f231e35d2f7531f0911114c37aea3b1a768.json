{"ast":null,"code":"// import { AnimatePresence, motion, Variants } from \"framer-motion\"\n// import { useState, useEffect } from \"react\";\n// import styled from \"styled-components\";\n// import axios from \"axios\";\n// const Container = styled.div`\n//     position: relative;\n//     margin: 0 auto;\n//     margin-bottom: 100px;\n//     background-color: black;\n//     height: 300px;\n//     width: 1200px;\n//     overflow: hidden;\n// `\n// const Slider = styled(motion.div)`\n//   display: grid;\n//   gap: 10px;\n//   grid-template-columns: repeat(4, 1fr);\n//   position: absolute;\n//   width: 100%;\n//   top: 50px;\n// `\n// const PlaceBox = styled(motion.img)`\n//     background-color: white;\n//     width: 100%;\n//     height: 200px;\n//     background-size: cover;\n//     background-position: center center;\n//     color: black;\n// `\n// const NextBtn = styled.button`\n//     position: absolute;\n//     right: 0;\n//     top: 50%;\n// `\n// const PrevBtn = styled.button`\n//     position: absolute;\n//     top: 50%;\n// `\n// const SliderVar: Variants = {\n//     hidden: (isBack: boolean) => ({\n//         x: isBack ? -1200 - 10 : 1200 + 10,\n//     }),\n//     visible: {\n//         x: 0,\n//     },\n//     exit: (isBack: boolean) => ({\n//         x: isBack ? 1200 + 10 : -1200 - 10,\n//     }),\n// };\n// export default function WholePlace() {\n//     const [images, setImages] = useState<string[]>([]);\n//     const [Index, setIndex] = useState<number>(0);\n//     const [back, setBack] = useState<boolean>(false);\n//     const [leaving, setLeaving] = useState<boolean>(false);\n//     useEffect(() => {\n//         const fetchImages = async () => {\n//             try {\n//                 console.log('Sending request...'); // 요청을 보내기 전에 콘솔에 메시지 출력\n//                 const response = await axios.get<{ images: string[] }>('/'); // Change the URL to your server endpoint\n//                 console.log('Response received:', response.data); // 요청에 대한 응답을 콘솔에 출력\n//                 setImages(response.data.images);\n//             } catch (error) {\n//                 console.error('Error fetching images:', error);\n//             }\n//         };\n//         fetchImages();\n//     }, []);\n//     const nextPlease = async () => {\n//         if (leaving) return;\n//         toggleLeaving();\n//         await setBack(false);\n//         setIndex((prev) => (prev === images.length - 4 ? 0 : prev + 4));\n//         try {\n//             const response = await axios.post('/', { data: 'your-data' });\n//             console.log('Server response:', response.data);\n//         } catch (error) {\n//             console.error('Error sending data to server:', error);\n//         }\n//     }\n//     const prevPlease = async () => {\n//         if (leaving) return;\n//         toggleLeaving();\n//         await setBack(true);\n//         setIndex((prev) => (prev === 0 ? images.length - 4 : prev - 4));\n//         try {\n//             const response = await axios.post('/', { data: 'your-data' });\n//             console.log('Server response:', response.data);\n//         } catch (error) {\n//             console.error('Error sending data to server:', error);\n//         }\n//     }\n//     const toggleLeaving = () => setLeaving((cur) => !cur);\n//     return (\n//         <Container>\n//             <AnimatePresence initial={false} onExitComplete={toggleLeaving}>\n//                 <Slider\n//                     custom={back}\n//                     variants={SliderVar}\n//                     initial=\"hidden\"\n//                     animate=\"visible\"\n//                     exit=\"exit\"\n//                     transition={{ type: \"tween\", duration: 1 }}\n//                     key={Index}\n//                 >\n//                     {images.slice(Index, Index + 4).map((imageUrl, idx) => (\n//                         <PlaceBox src={imageUrl} key={idx} />\n//                     ))}\n//                 </Slider>\n//                 <PrevBtn onClick={prevPlease}>prev</PrevBtn>\n//                 <NextBtn onClick={nextPlease}>next</NextBtn>\n//             </AnimatePresence>\n//         </Container>\n//     )\n// }","map":{"version":3,"names":[],"sources":["C:/Users/user/Documents/GitHub/neighborhood_restaurant/client/src/components/WholePlace.tsx"],"sourcesContent":["// import { AnimatePresence, motion, Variants } from \"framer-motion\"\r\n// import { useState, useEffect } from \"react\";\r\n// import styled from \"styled-components\";\r\n// import axios from \"axios\";\r\n\r\n// const Container = styled.div`\r\n//     position: relative;\r\n//     margin: 0 auto;\r\n//     margin-bottom: 100px;\r\n//     background-color: black;\r\n//     height: 300px;\r\n//     width: 1200px;\r\n//     overflow: hidden;\r\n// `\r\n\r\n// const Slider = styled(motion.div)`\r\n//   display: grid;\r\n//   gap: 10px;\r\n//   grid-template-columns: repeat(4, 1fr);\r\n//   position: absolute;\r\n//   width: 100%;\r\n//   top: 50px;\r\n// `\r\n\r\n// const PlaceBox = styled(motion.img)`\r\n//     background-color: white;\r\n//     width: 100%;\r\n//     height: 200px;\r\n//     background-size: cover;\r\n//     background-position: center center;\r\n//     color: black;\r\n// `\r\n\r\n// const NextBtn = styled.button`\r\n//     position: absolute;\r\n//     right: 0;\r\n//     top: 50%;\r\n// `\r\n\r\n// const PrevBtn = styled.button`\r\n//     position: absolute;\r\n//     top: 50%;\r\n// `\r\n\r\n// const SliderVar: Variants = {\r\n//     hidden: (isBack: boolean) => ({\r\n//         x: isBack ? -1200 - 10 : 1200 + 10,\r\n//     }),\r\n//     visible: {\r\n//         x: 0,\r\n//     },\r\n//     exit: (isBack: boolean) => ({\r\n//         x: isBack ? 1200 + 10 : -1200 - 10,\r\n//     }),\r\n// };\r\n\r\n// export default function WholePlace() {\r\n//     const [images, setImages] = useState<string[]>([]);\r\n//     const [Index, setIndex] = useState<number>(0);\r\n//     const [back, setBack] = useState<boolean>(false);\r\n//     const [leaving, setLeaving] = useState<boolean>(false);\r\n\r\n//     useEffect(() => {\r\n//         const fetchImages = async () => {\r\n//             try {\r\n//                 console.log('Sending request...'); // 요청을 보내기 전에 콘솔에 메시지 출력\r\n//                 const response = await axios.get<{ images: string[] }>('/'); // Change the URL to your server endpoint\r\n//                 console.log('Response received:', response.data); // 요청에 대한 응답을 콘솔에 출력\r\n//                 setImages(response.data.images);\r\n//             } catch (error) {\r\n//                 console.error('Error fetching images:', error);\r\n//             }\r\n//         };\r\n    \r\n//         fetchImages();\r\n//     }, []);\r\n    \r\n\r\n//     const nextPlease = async () => {\r\n//         if (leaving) return;\r\n//         toggleLeaving();\r\n//         await setBack(false);\r\n//         setIndex((prev) => (prev === images.length - 4 ? 0 : prev + 4));\r\n    \r\n//         try {\r\n//             const response = await axios.post('/', { data: 'your-data' });\r\n//             console.log('Server response:', response.data);\r\n//         } catch (error) {\r\n//             console.error('Error sending data to server:', error);\r\n//         }\r\n//     }\r\n    \r\n//     const prevPlease = async () => {\r\n//         if (leaving) return;\r\n//         toggleLeaving();\r\n//         await setBack(true);\r\n//         setIndex((prev) => (prev === 0 ? images.length - 4 : prev - 4));\r\n    \r\n//         try {\r\n//             const response = await axios.post('/', { data: 'your-data' });\r\n//             console.log('Server response:', response.data);\r\n//         } catch (error) {\r\n//             console.error('Error sending data to server:', error);\r\n//         }\r\n//     }\r\n\r\n//     const toggleLeaving = () => setLeaving((cur) => !cur);\r\n\r\n//     return (\r\n//         <Container>\r\n//             <AnimatePresence initial={false} onExitComplete={toggleLeaving}>\r\n//                 <Slider\r\n//                     custom={back}\r\n//                     variants={SliderVar}\r\n//                     initial=\"hidden\"\r\n//                     animate=\"visible\"\r\n//                     exit=\"exit\"\r\n//                     transition={{ type: \"tween\", duration: 1 }}\r\n//                     key={Index}\r\n//                 >\r\n//                     {images.slice(Index, Index + 4).map((imageUrl, idx) => (\r\n//                         <PlaceBox src={imageUrl} key={idx} />\r\n//                     ))}\r\n//                 </Slider>\r\n//                 <PrevBtn onClick={prevPlease}>prev</PrevBtn>\r\n//                 <NextBtn onClick={nextPlease}>next</NextBtn>\r\n//             </AnimatePresence>\r\n//         </Container>\r\n//     )\r\n// }\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}